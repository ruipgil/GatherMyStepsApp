# FROM c12e/alpine-miniconda
FROM gliderlabs/alpine

RUN apk --update --repository http://dl-4.alpinelinux.org/alpine/edge/community add \
    bash \
    git \
    curl \
    ca-certificates \
    bzip2 \
    unzip \
    sudo \
    libstdc++ \
    glib \
    libxext \
    libxrender \
    tini \
    make \
    g++ \
    && curl -L "https://github.com/andyshinn/alpine-pkg-glibc/releases/download/2.23-r1/glibc-2.23-r1.apk" -o /tmp/glibc.apk \
    && curl -L "https://github.com/andyshinn/alpine-pkg-glibc/releases/download/2.23-r1/glibc-bin-2.23-r1.apk" -o /tmp/glibc-bin.apk \
    && curl -L "https://github.com/andyshinn/alpine-pkg-glibc/releases/download/2.23-r1/glibc-i18n-2.23-r1.apk" -o /tmp/glibc-i18n.apk \
    && apk add --allow-untrusted /tmp/glibc*.apk \
    && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \
    && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 \
    && rm -rf /tmp/glibc*apk /var/cache/apk/*

# Configure environment
ENV CONDA_DIR=/opt/conda CONDA_VER=4.0.5
ENV PATH=$CONDA_DIR/bin:$PATH SHELL=/bin/bash LANG=C.UTF-8

# Install conda
RUN mkdir -p $CONDA_DIR && \
    echo export PATH=$CONDA_DIR/bin:'$PATH' > /etc/profile.d/conda.sh && \
    curl https://repo.continuum.io/miniconda/Miniconda2-${CONDA_VER}-Linux-x86_64.sh  -o mconda.sh && \
    /bin/bash mconda.sh -f -b -p $CONDA_DIR && \
    rm mconda.sh && \
    $CONDA_DIR/bin/conda install --yes conda==${CONDA_VER}

RUN conda install scipy numpy scikit-learn pandas pip psycopg2
RUN conda clean -i -l -t -y

# Compile and run rtree
RUN wget http://download.osgeo.org/libspatialindex/spatialindex-src-1.7.0.tar.gz && \
    tar -xvzf spatialindex-src-1.7.0.tar.gz && \
    cd spatialindex-src-1.7.0/ && \
    ./configure && make && make install

# Install rtree python wrapper
ENV SPATIALINDEX_C_LIBRARY /usr/local/lib/libspatialindex_c.so.1
RUN git clone https://github.com/Toblerity/rtree
RUN cd rtree && python setup.py install

# Compile and install kalman filter
RUN git clone https://github.com/open-city/ikalman
RUN cd ikalman && python setup.py install

RUN pip install gpxpy

COPY Dockerfile._gms_ ./

RUN git clone https://github.com/ruipgil/TrackToTrip
RUN git clone https://github.com/ruipgil/processmysteps
RUN git clone https://github.com/ruipgil/LIFE processmysteps/life
RUN cp processmysteps/life/life.py processmysteps

RUN cd TrackToTrip && python setup.py install
RUN cd processmysteps && pip install -r requirements.txt

RUN mkdir input output backup life_out
COPY config.json processmysteps

CMD cd processmysteps && python server.py -c config.json
